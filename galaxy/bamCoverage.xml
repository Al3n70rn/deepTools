<tool id="bam2wig" name="bam-to-wig" version="1.3">
  <description>

  Given a BAM file, generates a coverage bigwig file.  Multiple 
  options available to count reads and normalize coverage.
  
  </description>

  <command interpreter="python">bam2wig
  --bam '$bamInput'
  --bamIndex ${bamInput.metadata.bam_index}
  --outFileName '$outFileName'
  --outFileFormat '$outFileFormat'

  --fragmentLength $fragmentLength
  --binSize $windowWidth
  --smoothValues '$smoothValues'
  #if $region!='':
    --region '$region'
  #end if

  #if $scaling.type=='rpkm':
    --normalizeUsingRPKM
  #elif $scaling.type=='1x':
    --normalizeTo1x $scaling.normalizeTo1x
  #elif $scaling.type=='own':
    --scaleFactor $scaling.scaleFactor
  #end if
  -p 1
  </command>

  <inputs>
    <param name="bamInput" format="bam" type="data" label="Input BAM file"
	   help="The BAM file must be sorted and indexed."/>

    <param name="fragmentLength" type="integer" value="300" min="1"
	   label="Length of the average fragment size"
	   help ="Reads will be extended to match this length. If set to the read length or smaller, the read will not be extended. However, the give size will be used together with the value given by 'normalize to 1x'. The formula to normalize using the sequencing depth is genomeSize/(# of mapped reads * fragment length)."/>

    <param name="windowWidth" type="integer" value="50" min="1" 
	   label="Bin size in bp"
	   help="The genome will be divided in bins (also called tiles) of 
		 the specified length. For each bin the overlaping number 
		 of fragments (or reads)  will be reported. If only half 
		 a fragment overlaps, this fraction will be reported. "/>

    <param name="smoothValues" type="text" value="no"
	   label="Smooth values using the following length (in bp)"
	   help ="The options are 'no' (default), 'yes' or an integer. If this option is set to 'yes', a sliding window of length 'fragment Length' would be considered to count the number of reads for each tile. In other words, the smooth values length defines a window, larger than the bin size, to average the reads. This window is advanced/moved over the distance defined in the bin size'. If instead of 'yes' or 'no' an integer is given, this value would be used to define de smooth window length in base pairs. Any value smaller than  bin size will be ignored and no smooth will be applied "/>

    <param name="region" type="text" value=""
	   label="Region of the genome to compute the coverage"
	   help="The format is chr:start:end Leave in black to compute 
		 the coverage for of the whole genome." />

    <conditional name="scaling">
      <param name="type" type="select" label="Scaling/Normalization method" >
        <option value="1x">Normalize coverage to 1x</option>
        <option value="rpkm">Normalize to Fragments (reads) per kilobase per million (RPKM)</option>
        <option value="own">Set your own scaling factor</option>	
        <option value="no">Do not normalize or scale</option>	
      </param>
      <when value="1x">
	<param name="normalizeTo1x" type="integer" value="2150570000"
	       label="Genome size"
	       help ="Enter the genome size to normalize the reads counts. Sequencing depth is defined as the total number of mapped reads * fragment length / effective genome size. To use this option, the effective genome size has to be given. Common values are: mm9: 2150570000, hg19:2451960000, dm3:121400000 and ce10:93260000."/>
      </when>
      <when value="own">
	<param name="scaleFactor" type="float" value="1" size="3" 
	       label="Scale factor to multiply all values" />
      </when>
    </conditional>

    <param name="outFileFormat" type="select" label="Coverage file format">
        <option value="bigwig" selected="true">bigwig</option>
	<option value="bedgraph">bedgraph</option>
    </param>

  </inputs>
  <outputs>
    <data format="bigwig" name="outFileName">
	<change_format>
		<when input="outFileFormat" value="bigwig" format="bigwig" />
		<when input="outFileFormat" value="bedgraph" format="bedgraph" />
	</change_format>
    </data>
  </outputs>

  <requirements>
    <requirement type="python-module">argsparse</requirement>
    <requirement type="python-module">pysam</requirement>
    <requirement type="python-module">numpy</requirement>
  </requirements>

  <help>

**What it does**

This tool computes the read coverage from a bam file.

The resulting read counts can be normalized   using a given scaling factor, using the RPKM formula or normalizing to get a 1x depth of coverage. 

-----

.. class:: infomark

Please acknowledge that this tool **is still in development** and we will be very happy to receive feedback from the users. If you run into any trouble please sent an email to `Fidel Ramirez`_.

This tool is developed by the `Bioinformatics and Deep-Sequencing Unit`_ at the `Max Planck Institute for Immunobiology and Epigenetics`_.


.. _Bioinformatics and Deep-Sequencing Unit: http://www3.ie-freiburg.mpg.de/facilities/research-facilities/bioinformatics-and-deep-sequencing-unit/
.. _Max Planck Institute for Immunobiology and Epigenetics: http://www3.ie-freiburg.mpg.de
.. _Fidel Ramirez: ramirez@ie-freiburg.mpg.de

</help>
  
</tool>
