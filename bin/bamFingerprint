#!/usr/bin/env python
#-*- coding: utf-8 -*-

import argparse 
import multiprocessing
from  matplotlib import use as mplt_use
mplt_use('Agg')
import matplotlib.pyplot as plt

import deeptools.countReadsPerBin as countR
from deeptools import parserCommon

import numpy as np

def parseArguments(args=None):
    parentParser = parserCommon.getParentArgParse()
    bamParser = parserCommon.bam()

    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                     description = 'Samples indexed bam files '
                                     'and plots a profile for each bam file. '
                                     'At each sample position all reads '
                                     'overlaping a window (bin) of '
                                     'specified length are counted. '
                                     'This counts are then sorted '
                                     'and the cumulative sum plotted ',
                                     parents=[parentParser, bamParser],
                                     conflict_handler='resolve')

    # define the arguments
    parser.add_argument('--bamfiles', '-b',
                        metavar = 'bam files',
                        nargs = '+',
                        help = 'List of sorted Bam files',
                        required = True)

    parser.add_argument('--labels', '-l',
                        metavar = 'list of labels files',
                        help = 'List of labels to use in the output. '
                        'If not given the file names will be used instead. '
                        'Separate the labels by space.',
                        nargs = '+')

    parser.add_argument('--binSize', '-bs',
                        help = 'Length in base pairs for a window used to sample the genome.',
                        default = 500,
                        type = int)


    parser.add_argument('--fragmentLength', '-f',
                        help = 'Length of the average fragment size.',
                        type = int,
                        default = 200)

    parser.add_argument('--numberOfSamples', '-n',
                        help = 'Number of bins, sampled from the genome to compute the average number of reads.',
                        default = 5e5,
                        type = int)

    parser.add_argument('--skipZeros',
                        help = 'If set, then zero counts that happen for *all* bam files given are ignored. This will result in a reduced number of read counts than the the specified in --numberOfSamples',
                        action = 'store_true',
                        required = False)

    group = parser.add_argument_group('Output')

    group.add_argument('--plotFile', '-plot',
                       help = 'File name to save the .png file containing a plot '
                       'of the finger-print.',
                       metavar = 'FILE',
                       type=argparse.FileType('w'),
                       required=True)

    group.add_argument('--outRawCounts',
                        help = 'Output file name to save the bin counts',
                        metavar = 'FILENAME',
                        type=argparse.FileType('w'))

    group.add_argument('--plotFileFormat',
                       metavar='',
                       help='image format type. If given, this option overrides the '
                       'image format based on the plotFile ending. '
                       'The available options are: "png", "emf", '
                        '"eps", "pdf" and "svg"',
                       choices=['png','pdf', 'svg','eps', 'emf'])

    args = parser.parse_args(args)

    if args.labels and len(args.bamfiles) != len(args.labels):
        print "The number of does not match the number of bam files."
        exit(0)

    if not args.labels:
        args.labels = args.bamfiles

    return(args)


def main(args):
    num_reads_per_bin = countR.getNumReadsPerBin(args.bamfiles, 
                                                 args.binSize, 
                                                 args.numberOfSamples, 
                                                 args.fragmentLength, 
                                                 numberOfProcessors=args.numberOfProcessors, 
                                                 skipZeros=args.skipZeros,
                                                 verbose=args.verbose,
                                                 region=args.region)

    total = len(num_reads_per_bin[:,0])
    x = np.arange(total).astype('float')/total # normalize from 0 to 1

    i = 0    
    for reads in num_reads_per_bin.T:
        count = np.cumsum(np.sort(reads))
        count = count/count[-1] # to normalyze y from 0 to 1
        plt.plot(x, count, label=args.labels[i])
        xl = plt.xlabel('rank')
        yl = plt.ylabel('fraction w.r.t. bin with highest coverage')
        i +=1
    plt.legend(loc='upper left')

    # set the plotFileFormat explicitly to None to trigger the format from the file-extension
    if not args.plotFileFormat:
        args.plotFileFormat = None

    plt.savefig(args.plotFile, bbox_inches=0, format=args.plotFileFormat)

    if args.outRawCounts:
        args.outRawCounts.write("'" + "'\t'".join(args.labels) + "'\n" )
        fmt = "\t".join(np.repeat('%d', num_reads_per_bin.shape[1])) + "\n"
        for row in num_reads_per_bin:
            args.outRawCounts.write(fmt % tuple(row))

if __name__ == "__main__":
    args = parseArguments()
    main(args)
