#!/usr/bin/env python
#-*- coding: utf-8 -*-

import sys
sys.path.insert(1, '/data/projects/ramirez/tools/deepTools/')
import argparse  # to parse command line arguments

# my packages
from deeptools import writeBedGraph_bam_and_bw
from deeptools import parserCommon
from deeptools.getRatio import getRatio
debug = 0


def parseArguments(args=None):
    parentParser = parserCommon.getParentArgParse()
    outputParser = parserCommon.output()
    parser = argparse.ArgumentParser(
        parents=[parentParser, outputParser],
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description='This tool compares two bigwig files based on the number '
        'of mapped reads. To compare the bigwig files the genome is '
        'partitined into equal size bins, then the number of reads found in '
        'each BAM file are counted for such bins and finally a summarizing '
        'value is reported. This vaule can be the ratio of the number of reads'
        'per bin, the log2 of the ratio or the difference.')

    # define the arguments
    parser.add_argument('--bigwig1', '-b1',
                        metavar='Bigwig file',
                        help='Bigwig file 1. Usually the file for the '
                        'treatment.',
                        required=True)

    parser.add_argument('--bigwig2', '-b2',
                        metavar='Bigwib file',
                        help='Bigwig file 2. Usually the file for the '
                        'control.',
                        required=True)

    parser.add_argument('--scaleFactors',
                        help='Set this parameter to multipy the bigwig values '
                        'by a constant. The format is '
                        'scaleFactor1:scaleFactor2. '
                        'For example 0.7:1 to scale the first bigwig file '
                        'by 0.7 while not scaling the second bigwig file',
                        default=None,
                        required=False)

    parser.add_argument('--pseudocount',
                        help='small number to avoid log2(x/0)',
                        default=1,
                        type=float,
                        required=False)

    parser.add_argument('--ratio',
                        help='The default output the log2ratio between the '
                        'two samples. The reciprocal ratio returns the '
                        'the negative of the inverse of the ratio '
                        'if the ratio is less than 0. The resulting '
                        'values are interpreted as negative fold changes. ',
                        default='log2',
                        choices=['log2', 'ratio', 'subtract', 'add',
                                 'reciprocal_ratio'],
                        required=False)

    parser.add_argument('--missingDataAsZero',
                        default="yes",
                        choices=["yes", "no"],
                        help='Default is "yes". This parameter determines if '
                        'missing data should be treated as zeros. If set '
                        'to "no", missing data will be ignored and not '
                        'included in the output file. Missing data is defined '
                        'as those regions for which *any* of the bigwig files '
                        'does not have any value.')

    args = parser.parse_args(args)
    args.missingDataAsZero = True if args.missingDataAsZero == 'yes' else False

    return(args)


########################################
# MAIN


def main(args):

    ################# compute log2ratio ##################
    if args.scaleFactors:
        scaleFactors = args.scaleFactors.split(":")
    else:
        scaleFactors = [1, 1]

    scaling = float(scaleFactors[0]) / scaleFactors[1]

    p1 = args.pseudocount * 1.0 / (1 + scaling)
    p2 = args.pseudocount * float(scaling) / (1 + scaling)

    # the getRatio function is called and receives
    # the funcArgs per each tile that is considered
    FUNC = getRatio
    funcArgs = {'missingDataAsZero': args.missingDataAsZero,
                'valueType': args.ratio,
                'scaleFactors': scaleFactors,
                'p1': p1,
                'p2': p2}

    writeBedGraph_bam_and_bw.writeBedGraph(
        [(args.bigwig1, 'bigwig'),
         (args.bigwig2, 'bigwig')],
        args.outFileName, 0, FUNC,
        funcArgs, tileSize=args.binSize, region=args.region,
        numberOfProcessors=args.numberOfProcessors,
        format=args.outFileFormat,
        zerosToNans=False,
        smoothLength=False,
        extendPairedEnds=False)

if __name__ == "__main__":
    args = parseArguments()
    main(args)
